{
  "openapi": "3.0.0",
  "info": {
    "title": "HF API",
    "description": "OpenAPI specification for the Hack Forums API.<br><br>Requires access token obtained via <a href=\"https://hackforums.net/usercp.php?action=apideveloper\">HF API Developer Portal</a> to use 'Try it out' functionality.",
    "version": "2.0.0",
    "license": {
      "name": "MIT",
      "url": "https://github.com/xadamxk/hf-api-specification/blob/master/LICENSE"
    },
    "contact": {
      "name": "xadamxk",
      "url": "https://hackforums.net/member.php?action=profile&uid=1306528"
    }
  },
  "servers": [
    {
      "url": "https://hackforums.net/api/v2",
      "description": "HF API Version 2"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "ContractPositions": {
        "$ref": "#/components/schemas/ContractPositions-2"
      },
      "ContractPaymentTypes": {
        "$ref": "#/components/schemas/ContractPaymentTypes-2"
      },
      "BratingsReadRequest": {
        "type": "object",
        "description": "Permission: Contracts Permissions",
        "properties": {
          "_crid": {
            "type": "array",
            "description": "Brating id(s).",
            "items": {
              "type": "number"
            }
          },
          "_cid": {
            "type": "array",
            "description": "Contract id(s).",
            "items": {
              "type": "number"
            }
          },
          "_uid": {
            "type": "array",
            "description": "User id(s). Optional _page & _perpage parameters.",
            "items": {
              "type": "number"
            }
          },
          "_from": {
            "type": "array",
            "description": "From user id(s). Optional _page & _perpage parameters.",
            "items": {
              "type": "number"
            }
          },
          "_to": {
            "type": "array",
            "description": "To user id(s). Optional _page & _perpage parameters.",
            "items": {
              "type": "number"
            }
          },
          "_page": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "_perpage": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "crid": {
            "type": "boolean"
          },
          "contractid": {
            "type": "boolean"
          },
          "fromid": {
            "type": "boolean"
          },
          "toid": {
            "type": "boolean"
          },
          "dateline": {
            "type": "boolean"
          },
          "amount": {
            "type": "boolean"
          },
          "message": {
            "type": "boolean"
          },
          "contract": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "from": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "to": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "BratingsReadRequestAsk": {
        "type": "object",
        "description": "",
        "properties": {
          "asks": {
            "$ref": "#/components/schemas/BratingsReadRequest"
          }
        }
      },
      "BytesReadRequest": {
        "type": "object",
        "description": "Permission: Bytes Permissions",
        "properties": {
          "_id": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "_uid": {
            "type": "array",
            "description": "Optional _page & _perpage parameters",
            "items": {
              "type": "number"
            }
          },
          "_from": {
            "type": "array",
            "description": "Optional _page & _perpage parameters",
            "items": {
              "type": "number"
            }
          },
          "_to": {
            "type": "array",
            "description": "Optional _page & _perpage parameters",
            "items": {
              "type": "number"
            }
          },
          "_page": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "_perpage": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "id": {
            "type": "number",
            "description": "Transaction id."
          },
          "amount": {
            "type": "number"
          },
          "dateline": {
            "type": "number"
          },
          "type": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          },
          "from": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "to": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "post": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "BytesReadRequestAsk": {
        "type": "object",
        "description": "",
        "properties": {
          "asks": {
            "$ref": "#/components/schemas/BytesReadRequest"
          }
        }
      },
      "ContractsReadRequest": {
        "type": "object",
        "description": "Permission: Contracts Permissions",
        "properties": {
          "_cid": {
            "type": "array",
            "description": "Contract id(s).",
            "items": {
              "type": "number"
            }
          },
          "_uid": {
            "type": "array",
            "description": "Optional _page & _perpage parameters.",
            "items": {
              "type": "number"
            }
          },
          "_page": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "_perpage": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "cid": {
            "type": "boolean",
            "description": "Contract id."
          },
          "dateline": {
            "type": "boolean",
            "description": "Contract start date time."
          },
          "otherdateline": {
            "type": "boolean",
            "description": "Contract end date time."
          },
          "public": {
            "type": "boolean"
          },
          "timeout_days": {
            "type": "boolean"
          },
          "timeout": {
            "type": "boolean"
          },
          "status": {
            "type": "boolean"
          },
          "istatus": {
            "type": "boolean"
          },
          "ostatus": {
            "type": "boolean"
          },
          "cancelstatus": {
            "type": "boolean"
          },
          "type": {
            "type": "boolean"
          },
          "tid": {
            "type": "boolean"
          },
          "inituid": {
            "type": "boolean"
          },
          "otheruid": {
            "type": "boolean"
          },
          "muid": {
            "type": "boolean"
          },
          "iprice": {
            "type": "boolean"
          },
          "oprice": {
            "type": "boolean"
          },
          "iproduct": {
            "type": "boolean"
          },
          "oproduct": {
            "type": "boolean"
          },
          "icurrency": {
            "type": "boolean"
          },
          "ocurrency": {
            "type": "boolean"
          },
          "terms": {
            "type": "boolean"
          },
          "template_id": {
            "type": "boolean"
          },
          "oaddress": {
            "type": "boolean"
          },
          "iaddress": {
            "type": "boolean"
          },
          "inituser": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "otheruser": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "escrow": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "thread": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "idispute": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "odispute": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ibrating": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "obrating": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ContractsReadRequestAsk": {
        "type": "object",
        "description": "",
        "properties": {
          "asks": {
            "$ref": "#/components/schemas/ContractsReadRequest"
          }
        }
      },
      "DisputesReadRequest": {
        "type": "object",
        "description": "Permission: Contracts Permissions",
        "properties": {
          "_cdid": {
            "type": "array",
            "description": "Dispute id(s).",
            "items": {
              "type": "number"
            }
          },
          "_cid": {
            "type": "array",
            "description": "Contract id(s).",
            "items": {
              "type": "number"
            }
          },
          "_uid": {
            "type": "array",
            "description": "User id(s). Optional _page & _perpage parameters.",
            "items": {
              "type": "number"
            }
          },
          "_claimantuid": {
            "type": "array",
            "description": "Claimant uid(s). Optional _page & _perpage parameters.",
            "items": {
              "type": "number"
            }
          },
          "_defendantuid": {
            "type": "array",
            "description": "Defendant uid(s). Optional _page & _perpage parameters.",
            "items": {
              "type": "number"
            }
          },
          "_page": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "_perpage": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "cdid": {
            "type": "boolean"
          },
          "contractid": {
            "type": "boolean"
          },
          "claimantuid": {
            "type": "boolean"
          },
          "defendantuid": {
            "type": "boolean"
          },
          "dateline": {
            "type": "boolean"
          },
          "status": {
            "type": "boolean"
          },
          "dispute_tid": {
            "type": "boolean"
          },
          "claimantnotes": {
            "type": "boolean"
          },
          "defendantnotes": {
            "type": "boolean"
          },
          "contract": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "claimant": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "defendant": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "dispute_thread": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "DisputesReadRequestAsk": {
        "type": "object",
        "description": "",
        "properties": {
          "asks": {
            "$ref": "#/components/schemas/DisputesReadRequest"
          }
        }
      },
      "ForumsReadRequest": {
        "type": "object",
        "description": "Permission: Posts Permissions",
        "properties": {
          "_fid": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "fid": {
            "type": "boolean"
          },
          "name": {
            "type": "boolean"
          },
          "description": {
            "type": "boolean"
          },
          "type": {
            "type": "boolean"
          }
        }
      },
      "ForumsReadRequestAsk": {
        "type": "object",
        "description": "",
        "properties": {
          "asks": {
            "$ref": "#/components/schemas/ForumsReadRequest"
          }
        }
      },
      "MeReadRequest": {
        "type": "object",
        "description": "Permission: Basic & Advanced Info Permissions",
        "properties": {
          "vault": {
            "type": "boolean",
            "description": "API client vault balance"
          },
          "uid": {
            "type": "boolean"
          },
          "username": {
            "type": "boolean"
          },
          "usergroup": {
            "type": "boolean"
          },
          "displaygroup": {
            "type": "boolean"
          },
          "additionalgroups": {
            "type": "boolean"
          },
          "postnum": {
            "type": "boolean"
          },
          "awards": {
            "type": "boolean"
          },
          "bytes": {
            "type": "boolean"
          },
          "threadnum": {
            "type": "boolean"
          },
          "avatar": {
            "type": "boolean"
          },
          "avatardimensions": {
            "type": "boolean"
          },
          "avatartype": {
            "type": "boolean"
          },
          "lastvisit": {
            "type": "boolean"
          },
          "usertitle": {
            "type": "boolean"
          },
          "website": {
            "type": "boolean"
          },
          "timeonline": {
            "type": "boolean"
          },
          "reputation": {
            "type": "boolean"
          },
          "referrals": {
            "type": "boolean"
          },
          "lastactive": {
            "type": "boolean",
            "description": "Requires 'Advanced Info' permissions"
          },
          "unreadpms": {
            "type": "boolean",
            "description": "Requires 'Advanced Info' permissions"
          },
          "invisible": {
            "type": "boolean",
            "description": "Requires 'Advanced Info' permissions"
          },
          "totalpms": {
            "type": "boolean",
            "description": "Requires 'Advanced Info' permissions"
          },
          "warningpoints": {
            "type": "boolean",
            "description": "Requires 'Advanced Info' permissions"
          }
        }
      },
      "MeReadRequestAsk": {
        "type": "object",
        "description": "",
        "properties": {
          "asks": {
            "$ref": "#/components/schemas/MeReadRequest"
          }
        }
      },
      "PostsReadRequest": {
        "type": "object",
        "description": "Permission: Posts Permissions",
        "properties": {
          "_pid": {
            "type": "array",
            "description": "Search directly by Post ID(s).",
            "items": {
              "type": "number"
            }
          },
          "_tid": {
            "type": "array",
            "description": "Search directly by Thread ID(s).",
            "items": {
              "type": "number"
            }
          },
          "_uid": {
            "type": "array",
            "description": "Search directly by User ID(s).",
            "items": {
              "type": "number"
            }
          },
          "_page": {
            "type": "array",
            "description": "Optional: Used with _tid or _uid.",
            "items": {
              "type": "number"
            }
          },
          "_perpage": {
            "type": "array",
            "description": "Optional: Used with _tid or _uid.",
            "items": {
              "type": "number"
            }
          },
          "pid": {
            "type": "boolean"
          },
          "tid": {
            "type": "boolean"
          },
          "uid": {
            "type": "boolean"
          },
          "fid": {
            "type": "boolean"
          },
          "dateline": {
            "type": "boolean"
          },
          "message": {
            "type": "boolean"
          },
          "subject": {
            "type": "boolean"
          },
          "edituid": {
            "type": "boolean"
          },
          "edittime": {
            "type": "boolean"
          },
          "editreason": {
            "type": "boolean"
          },
          "author": {
            "type": "array",
            "description": "Array of Users",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PostsReadRequestAsk": {
        "type": "object",
        "description": "",
        "properties": {
          "asks": {
            "$ref": "#/components/schemas/PostsReadRequest"
          }
        }
      },
      "UsersReadRequest": {
        "type": "object",
        "description": "Permission: Users Permissions",
        "properties": {
          "_uid": {
            "type": "array",
            "description": "Search directly by User ID(s).",
            "items": {
              "type": "number"
            }
          },
          "uid": {
            "type": "boolean"
          },
          "username": {
            "type": "boolean"
          },
          "usergroup": {
            "type": "boolean"
          },
          "displaygroup": {
            "type": "boolean"
          },
          "additionalgroups": {
            "type": "boolean"
          },
          "postnum": {
            "type": "boolean",
            "description": "alias: post count"
          },
          "awards": {
            "type": "boolean"
          },
          "myps": {
            "type": "boolean",
            "description": "alias: bytes"
          },
          "threadnum": {
            "type": "boolean",
            "description": "alias: thread count"
          },
          "avatar": {
            "type": "boolean"
          },
          "avatardimensions": {
            "type": "boolean"
          },
          "avatartype": {
            "type": "boolean"
          },
          "usertitle": {
            "type": "boolean"
          },
          "website": {
            "type": "boolean"
          },
          "timeonline": {
            "type": "boolean"
          },
          "reputation": {
            "type": "boolean",
            "description": "alias: popularity"
          },
          "referrals": {
            "type": "boolean"
          }
        }
      },
      "SigmarketMarketReadRequest": {
        "type": "object",
        "description": "Permission: ? Permissions",
        "properties": {
          "_type": {
            "type": "string",
            "enum": [
              "market"
            ],
            "description": "Market: available signatures for purchase."
          },
          "_uid": {
            "type": "array",
            "description": "Search directly by User ID(s).",
            "items": {
              "type": "number"
            }
          },
          "_page": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "_perpage": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "uid": {
            "type": "boolean"
          },
          "user": {
            "$ref": "#/components/schemas/UsersReadRequest"
          },
          "price": {
            "type": "boolean"
          },
          "duration": {
            "type": "boolean"
          },
          "active": {
            "type": "boolean"
          },
          "sig": {
            "type": "boolean"
          },
          "dateadded": {
            "type": "boolean"
          },
          "ppd": {
            "type": "boolean",
            "description": "Price per day."
          }
        }
      },
      "SigmarketMarketReadRequestAsk": {
        "type": "object",
        "description": "",
        "properties": {
          "asks": {
            "$ref": "#/components/schemas/SigmarketMarketReadRequest"
          }
        }
      },
      "SigmarketOrderReadRequest": {
        "type": "object",
        "description": "Permission: ? Permissions",
        "properties": {
          "_type": {
            "type": "string",
            "enum": [
              "order"
            ],
            "description": "Order: placed signature market order."
          },
          "_smid": {
            "type": "array",
            "description": "Search directly by Order ID(s).",
            "items": {
              "type": "number"
            }
          },
          "_uid": {
            "type": "array",
            "description": "Search directly by User ID(s).",
            "items": {
              "type": "number"
            }
          },
          "_seller": {
            "type": "array",
            "description": "Search directly by Seller User ID(s). Optional _page & _perpage parameters.",
            "items": {
              "type": "number"
            }
          },
          "_buyer": {
            "type": "array",
            "description": "Search directly by Buyer User ID(s). Optional _page & _perpage parameters.",
            "items": {
              "type": "number"
            }
          },
          "_page": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "_perpage": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "smid": {
            "description": "Signature market ID.",
            "type": "boolean"
          },
          "buyer": {
            "$ref": "#/components/schemas/UsersReadRequest"
          },
          "seller": {
            "$ref": "#/components/schemas/UsersReadRequest"
          },
          "startdate": {
            "type": "boolean"
          },
          "enddate": {
            "type": "boolean"
          },
          "price": {
            "type": "boolean"
          },
          "duration": {
            "type": "boolean"
          },
          "active": {
            "type": "boolean"
          }
        }
      },
      "SigmarketOrderReadRequestAsk": {
        "type": "object",
        "description": "",
        "properties": {
          "asks": {
            "$ref": "#/components/schemas/SigmarketOrderReadRequest"
          }
        }
      },
      "ThreadsReadRequest": {
        "type": "object",
        "description": "Permission: Posts Permissions",
        "properties": {
          "_tid": {
            "type": "array",
            "description": "Search directly by Thread ID(s).",
            "items": {
              "type": "number"
            }
          },
          "_fid": {
            "type": "array",
            "description": "Search posts by Forum ID(s).",
            "items": {
              "type": "number"
            }
          },
          "_uid": {
            "type": "array",
            "description": "Search by User ID(s).",
            "items": {
              "type": "number"
            }
          },
          "_page": {
            "type": "array",
            "description": "Optional: Used with _uid.",
            "items": {
              "type": "number"
            }
          },
          "_perpage": {
            "type": "array",
            "description": "Optional: Used with _uid.",
            "items": {
              "type": "number"
            }
          },
          "tid": {
            "type": "boolean"
          },
          "uid": {
            "type": "boolean"
          },
          "fid": {
            "type": "boolean"
          },
          "subject": {
            "type": "boolean",
            "description": "Return name of thread."
          },
          "closed": {
            "type": "boolean"
          },
          "numreplies": {
            "type": "boolean"
          },
          "views": {
            "type": "boolean"
          },
          "dateline": {
            "type": "boolean"
          },
          "firstpost": {
            "type": "boolean"
          },
          "lastpost": {
            "type": "boolean"
          },
          "lastposter": {
            "type": "boolean"
          },
          "lastposteruid": {
            "type": "boolean"
          },
          "prefix": {
            "type": "boolean"
          },
          "icon": {
            "type": "boolean"
          },
          "poll": {
            "type": "boolean"
          },
          "username": {
            "type": "boolean"
          },
          "sticky": {
            "type": "boolean"
          },
          "bestpid": {
            "type": "boolean"
          }
        }
      },
      "ThreadsReadRequestAsk": {
        "type": "object",
        "description": "",
        "properties": {
          "asks": {
            "$ref": "#/components/schemas/ThreadsReadRequest"
          }
        }
      },
      "UsersReadRequestAsk": {
        "type": "object",
        "description": "",
        "properties": {
          "asks": {
            "$ref": "#/components/schemas/UsersReadRequest"
          }
        }
      },
      "BratingsWriteResponse": {
        "type": "object",
        "description": "",
        "properties": {
          "bratings": {
            "type": "array",
            "description": "Bratings response.",
            "items": {
              "type": "object",
              "properties": {
                "crid": {
                  "type": "string"
                },
                "contractid": {
                  "type": "string"
                },
                "fromid": {
                  "type": "string"
                },
                "toid": {
                  "type": "string"
                },
                "dateline": {
                  "type": "string"
                },
                "amount": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "BytesReadResponse": {
        "type": "object",
        "description": "",
        "properties": {
          "bytes": {
            "type": "array",
            "description": "Bytes response.",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "amount": {
                  "type": "string"
                },
                "dateline": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "reason": {
                  "type": "string"
                },
                "from": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "to": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "post": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "ContractsReadResponse": {
        "type": "object",
        "description": "",
        "properties": {
          "contracts": {
            "type": "array",
            "description": "Contracts response.",
            "items": {
              "type": "object",
              "properties": {
                "cid": {
                  "type": "string"
                },
                "dateline": {
                  "type": "string"
                },
                "otherdateline": {
                  "type": "string"
                },
                "public": {
                  "type": "string"
                },
                "timeout_days": {
                  "type": "string"
                },
                "timeout": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "DisputesReadResponse": {
        "type": "object",
        "description": "",
        "properties": {
          "bratings": {
            "type": "array",
            "description": "Bratings response.",
            "items": {
              "type": "object",
              "properties": {
                "cdid": {
                  "type": "string"
                },
                "contractid": {
                  "type": "string"
                },
                "claimantuid": {
                  "type": "string"
                },
                "defendantuid": {
                  "type": "string"
                },
                "dateline": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                },
                "dispute_tid": {
                  "type": "string"
                },
                "claimantnotes": {
                  "type": "string"
                },
                "defendantnotes": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "ForumsReadResponse": {
        "type": "object",
        "description": "",
        "properties": {
          "forums": {
            "type": "array",
            "description": "Forums response.",
            "items": {
              "type": "object",
              "properties": {
                "fid": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "MeReadResponse": {
        "type": "object",
        "description": "",
        "properties": {
          "me": {
            "type": "array",
            "description": "Bratings response.",
            "items": {
              "type": "object",
              "properties": {
                "uid": {
                  "type": "string"
                },
                "username": {
                  "type": "string"
                },
                "usergroup": {
                  "type": "string"
                },
                "displaygroup": {
                  "type": "string"
                },
                "additionalgroups": {
                  "type": "string"
                },
                "postnum": {
                  "type": "string"
                },
                "awards": {
                  "type": "string"
                },
                "bytes": {
                  "type": "string"
                },
                "threadnum": {
                  "type": "string"
                },
                "avatar": {
                  "type": "string"
                },
                "avatardimensions": {
                  "type": "string"
                },
                "avatartype": {
                  "type": "string"
                },
                "lastvisit": {
                  "type": "string"
                },
                "usertitle": {
                  "type": "string"
                },
                "website": {
                  "type": "string"
                },
                "timeonline": {
                  "type": "string"
                },
                "reputation": {
                  "type": "string"
                },
                "referrals": {
                  "type": "string"
                },
                "lastactive": {
                  "type": "string"
                },
                "unreadpms": {
                  "type": "string"
                },
                "invisible": {
                  "type": "string"
                },
                "totalpms": {
                  "type": "string"
                },
                "warningpoints": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "PostsReadResponse": {
        "type": "object",
        "description": "",
        "properties": {
          "posts": {
            "type": "array",
            "description": "Posts response.",
            "items": {
              "type": "object",
              "properties": {
                "pid": {
                  "type": "string"
                },
                "tid": {
                  "type": "string"
                },
                "uid": {
                  "type": "string"
                },
                "fid": {
                  "type": "string"
                },
                "dateline": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "subject": {
                  "type": "string"
                },
                "edituid": {
                  "type": "string"
                },
                "edittime": {
                  "type": "string"
                },
                "editreason": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "ThreadsReadResponse": {
        "type": "object",
        "description": "",
        "properties": {
          "threads": {
            "type": "array",
            "description": "Threads response.",
            "items": {
              "type": "object",
              "properties": {
                "tid": {
                  "type": "string"
                },
                "uid": {
                  "type": "string"
                },
                "fid": {
                  "type": "string"
                },
                "subject": {
                  "type": "string"
                },
                "closed": {
                  "type": "string"
                },
                "views": {
                  "type": "string"
                },
                "dateline": {
                  "type": "string"
                },
                "firstpost": {
                  "type": "string"
                },
                "lastpost": {
                  "type": "string"
                },
                "lastposter": {
                  "type": "string"
                },
                "lastposteruid": {
                  "type": "string"
                },
                "prefix": {
                  "type": "string"
                },
                "icon": {
                  "type": "string"
                },
                "poll": {
                  "type": "string"
                },
                "username": {
                  "type": "string"
                },
                "sticky": {
                  "type": "string"
                },
                "bestpid": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "PostsWriteRequest": {
        "type": "object",
        "description": "Permission: Posts Write Permissions",
        "required": [
          "_tid",
          "_message"
        ],
        "properties": {
          "_tid": {
            "type": "number",
            "description": "Thread ID to post on."
          },
          "_message": {
            "type": "string",
            "description": "Post content."
          }
        }
      },
      "PostsWriteRequestAsk": {
        "type": "object",
        "description": "response after creating a post",
        "properties": {
          "asks": {
            "$ref": "#/components/schemas/PostsWriteRequest"
          }
        }
      },
      "PostsWriteResponse": {
        "type": "object",
        "description": "",
        "properties": {
          "posts": {
            "type": "array",
            "description": "Posts response.",
            "items": {
              "type": "object",
              "properties": {
                "pid": {
                  "type": "string"
                },
                "tid": {
                  "type": "string"
                },
                "uid": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "ThreadsWriteRequest": {
        "type": "object",
        "description": "Permission: Posts Write Permissions",
        "required": [
          "_fid",
          "_subject",
          "_message"
        ],
        "properties": {
          "_fid": {
            "type": "string"
          },
          "_subject": {
            "type": "string"
          },
          "_message": {
            "type": "string"
          }
        }
      },
      "ThreadsWriteRequestAsk": {
        "type": "object",
        "description": "",
        "properties": {
          "asks": {
            "$ref": "#/components/schemas/ThreadsWriteRequest"
          }
        }
      },
      "ThreadsWriteResponse": {
        "type": "object",
        "description": "",
        "properties": {
          "threads": {
            "type": "array",
            "description": "Threads response.",
            "items": {
              "type": "object",
              "properties": {
                "tid": {
                  "type": "string"
                },
                "uid": {
                  "type": "string"
                },
                "subject": {
                  "type": "string"
                },
                "dateline": {
                  "type": "string"
                },
                "firstpost": {
                  "type": "object",
                  "properties": {
                    "pid": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "BytesWriteRequest": {
        "type": "object",
        "description": "Permission: Bytes Write Permissions",
        "required": [
          "_uid",
          "_amount"
        ],
        "properties": {
          "_uid": {
            "type": "string"
          },
          "_amount": {
            "type": "string"
          },
          "_pid": {
            "type": "string",
            "description": "Post ID to link donation to."
          },
          "_reason": {
            "type": "string",
            "description": "Byte donation reason."
          }
        }
      },
      "BytesWriteRequestAsk": {
        "type": "object",
        "description": "",
        "properties": {
          "asks": {
            "$ref": "#/components/schemas/BytesWriteRequest"
          }
        }
      },
      "BytesWriteResponse": {
        "type": "object",
        "description": "",
        "properties": {
          "bytes": {
            "type": "array",
            "description": "Bytes response.",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Bytes transaction id."
                }
              }
            }
          }
        }
      },
      "BytesDepositWriteRequest": {
        "type": "object",
        "description": "Permission: Bytes Write Permissions",
        "required": [
          "_deposit"
        ],
        "properties": {
          "_deposit": {
            "type": "number"
          }
        }
      },
      "BytesDepositWriteRequestAsk": {
        "type": "object",
        "description": "",
        "properties": {
          "asks": {
            "$ref": "#/components/schemas/BytesDepositWriteRequest"
          }
        }
      },
      "BytesWithdrawWriteRequest": {
        "type": "object",
        "description": "Permission: Bytes Write Permissions",
        "required": [
          "_withdraw"
        ],
        "properties": {
          "_withdraw": {
            "type": "number"
          }
        }
      },
      "BytesWithdrawWriteRequestAsk": {
        "type": "object",
        "description": "",
        "properties": {
          "asks": {
            "$ref": "#/components/schemas/BytesWithdrawWriteRequest"
          }
        }
      },
      "BytesBumpWriteRequest": {
        "type": "object",
        "description": "Permission: Bytes Write Permissions",
        "required": [
          "_bump"
        ],
        "properties": {
          "_bump": {
            "type": "number"
          }
        }
      },
      "BytesBumpWriteRequestAsk": {
        "type": "object",
        "description": "",
        "properties": {
          "asks": {
            "$ref": "#/components/schemas/BytesBumpWriteRequest"
          }
        }
      },
      "ContractPaymentTypes-2": {
        "type": "string",
        "format": "enum",
        "enum": [
          "btc",
          "eth",
          "bch",
          "exrd",
          "usdt",
          "ltc",
          "xmr",
          "xlm",
          "trx",
          "xrp",
          "doge",
          "dash",
          "wu",
          "paypal",
          "cashapp",
          "zelle",
          "venmo",
          "skrill",
          "pm",
          "google",
          "apple",
          "agc",
          "bytes",
          "other"
        ]
      },
      "ContractPositions-2": {
        "type": "string",
        "enum": [
          "none",
          "buying",
          "selling",
          "exchanging",
          "trading",
          "vouchcopy"
        ]
      },
      "ContractsWriteRequest": {
        "type": "object",
        "description": "Permission: Contracts Write Permissions",
        "required": [
          "_action",
          "_position",
          "_terms",
          "_tid",
          "_timeout",
          "_uid",
          "_youramount",
          "_yourcurrency"
        ],
        "properties": {
          "_action": {
            "type": "string",
            "enum": [
              "new"
            ]
          },
          "_uid": {
            "type": "string",
            "description": "Other user. Enter the profile link or UID of the user you would like to start a contract with."
          },
          "_terms": {
            "type": "string",
            "description": "Contract terms. Provide any additional details to be recorded in the contract. MyCode formatting NOT supported."
          },
          "_yourcurrency": {
            "$ref": "#/components/schemas/ContractPaymentTypes-2",
            "description": "Your currency."
          },
          "_youramount": {
            "type": "number",
            "description": "Your amount. The amount of the currency in this deal."
          },
          "_timeout": {
            "type": "number",
            "description": "Contract timeout. Enter the number of days this contract must be completed in before it is marked as Incomplete."
          },
          "_position": {
            "$ref": "#/components/schemas/ContractPositions-2",
            "description": "Your position. Choose the option that best describes your position in the contract."
          },
          "_theirproduct": {
            "type": "string",
            "description": "Optional: Other user product."
          },
          "_theircurrency": {
            "$ref": "#/components/schemas/ContractPaymentTypes-2",
            "description": "Optional: Other user currency."
          },
          "_theiramount": {
            "type": "number",
            "description": "Optional: Other user amount."
          },
          "_tid": {
            "type": "string",
            "description": "Optional: Thread link. Enter the thread link or TID of the thread you are starting a contract for."
          },
          "_muid": {
            "type": "string",
            "description": "Optional. Middleman/Escrow. Enter the profile link or UID of the user that will act as middleman/escrow for this contract. They must approve the contract as well."
          },
          "_public": {
            "type": "boolean",
            "description": "Optional. Is public contract? If set, contract will be able to be viewed by any user. Private by default."
          },
          "_address": {
            "type": "string",
            "description": "Optional. Payment address. Enter your payment address for this contract."
          }
        }
      },
      "ContractsWriteRequestAsk": {
        "type": "object",
        "description": "",
        "properties": {
          "asks": {
            "$ref": "#/components/schemas/ContractsWriteRequest"
          }
        }
      },
      "ContractsWriteResponse": {
        "type": "object",
        "description": "",
        "properties": {
          "contracts": {
            "type": "array",
            "description": "Contracts response.",
            "items": {
              "type": "object",
              "properties": {
                "cid": {
                  "type": "string",
                  "description": "Contract id."
                },
                "status": {
                  "type": "string",
                  "description": "Contract status."
                },
                "istatus": {
                  "type": "string",
                  "description": "Contract status."
                },
                "ostatus": {
                  "type": "string",
                  "description": "Contract status."
                },
                "inituid": {
                  "type": "string",
                  "description": "Initial user id."
                },
                "otheruid": {
                  "type": "string",
                  "description": "Other user id."
                }
              }
            }
          }
        }
      }
    },
    "responses": {
      "UnauthorizedError": {
        "description": "Access token is missing or invalid"
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/read": {
      "post": {
        "operationId": "AllRead",
        "summary": "Returns all available, provided read fields.",
        "description": "Returns all available, provided read fields.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "examples": {
                "all": {
                  "summary": "Return summary data for various endpoints.",
                  "value": {
                    "asks": {
                      "me": {
                        "uid": true,
                        "usergroup": true
                      },
                      "bratings": {
                        "_crid": [
                          "244577"
                        ],
                        "contractid": true
                      }
                    }
                  }
                }
              },
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/BratingsReadRequestAsk"
                  },
                  {
                    "$ref": "#/components/schemas/BytesReadRequestAsk"
                  },
                  {
                    "$ref": "#/components/schemas/ContractsReadRequestAsk"
                  },
                  {
                    "$ref": "#/components/schemas/DisputesReadRequestAsk"
                  },
                  {
                    "$ref": "#/components/schemas/ForumsReadRequestAsk"
                  },
                  {
                    "$ref": "#/components/schemas/MeReadRequestAsk"
                  },
                  {
                    "$ref": "#/components/schemas/PostsReadRequestAsk"
                  },
                  {
                    "$ref": "#/components/schemas/SigmarketMarketReadRequestAsk"
                  },
                  {
                    "$ref": "#/components/schemas/SigmarketOrderReadRequestAsk"
                  },
                  {
                    "$ref": "#/components/schemas/ThreadsReadRequestAsk"
                  },
                  {
                    "$ref": "#/components/schemas/UsersReadRequestAsk"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "All available read fields.",
            "headers": {
              "x-rate-limit-remaining": {
                "schema": {
                  "type": "integer",
                  "description": "Request limit per hour."
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/read/bratings": {
      "post": {
        "tags": [
          "bratings"
        ],
        "operationId": "ReadBratings",
        "summary": "Returns information relating to brating(s).",
        "description": "Returns information relating to brating(s).",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "examples": {
                "disputes": {
                  "summary": "return individual brating information.",
                  "value": {
                    "asks": {
                      "bratings": {
                        "_crid": [
                          "244577"
                        ],
                        "crid": true,
                        "contractid": true,
                        "fromid": true,
                        "toid": true,
                        "dateline": true,
                        "amount": true,
                        "message": true
                      }
                    }
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/BratingsReadRequestAsk"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Brating(s) info",
            "headers": {
              "x-rate-limit-remaining": {
                "schema": {
                  "type": "integer",
                  "description": "Request limit per hour."
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BratingsWriteResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/read/bytes": {
      "post": {
        "tags": [
          "bytes"
        ],
        "operationId": "ReadBytes",
        "summary": "Returns information relating to byte(s).",
        "description": "Returns information relating to byte(s).",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "examples": {
                "byteTransaction": {
                  "summary": "xadamxk's last 10 byte transactions.",
                  "value": {
                    "asks": {
                      "bytes": {
                        "_uid": "1306528",
                        "_perpage": 10,
                        "id": true,
                        "amount": true,
                        "dateline": true,
                        "type": true,
                        "reason": true
                      }
                    }
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/BytesReadRequestAsk"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Bytes(s) info",
            "headers": {
              "x-rate-limit-remaining": {
                "schema": {
                  "type": "integer",
                  "description": "Request limit per hour."
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BytesReadResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/read/contracts": {
      "post": {
        "tags": [
          "contracts"
        ],
        "operationId": "ReadContracts",
        "summary": "Returns information relating to contract(s).",
        "description": "Returns information relating to contract(s).",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "examples": {
                "contract": {
                  "summary": "return contract information.",
                  "value": {
                    "asks": {
                      "contracts": {
                        "_cid": [
                          279461
                        ],
                        "cid": true,
                        "dateline": true,
                        "otherdateline": true,
                        "public": true,
                        "timeout_days": true,
                        "timeout": true,
                        "status": true
                      }
                    }
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/ContractsReadRequestAsk"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Contract(s) info",
            "headers": {
              "x-rate-limit-remaining": {
                "schema": {
                  "type": "integer",
                  "description": "Request limit per hour."
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContractsReadResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/read/disputes": {
      "post": {
        "tags": [
          "disputes"
        ],
        "operationId": "ReadDisputes",
        "summary": "Returns information relating to dispute(s).",
        "description": "Returns information relating to dispute(s).",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "examples": {
                "disputes": {
                  "summary": "return individual dispute information.",
                  "value": {
                    "asks": {
                      "disputes": {
                        "_cdid": [
                          "84"
                        ],
                        "cdid": true,
                        "contractid": true,
                        "claimantuid": true,
                        "defendantuid": true,
                        "dateline": true,
                        "status": true,
                        "dispute_tid": true,
                        "claimantnotes": true,
                        "defendantnotes": true
                      }
                    }
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/DisputesReadRequestAsk"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Disputes(s) info",
            "headers": {
              "x-rate-limit-remaining": {
                "schema": {
                  "type": "integer",
                  "description": "Request limit per hour."
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DisputesReadResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/read/forums": {
      "post": {
        "tags": [
          "forums"
        ],
        "operationId": "ReadForums",
        "summary": "Returns information for provided forum(s).",
        "description": "Returns information for provided forum(s).",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "examples": {
                "lounge": {
                  "summary": "return lounge forum information",
                  "value": {
                    "asks": {
                      "forums": {
                        "_fid": [
                          25
                        ],
                        "fid": true,
                        "name": true,
                        "description": true,
                        "type": true
                      }
                    }
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/ForumsReadRequestAsk"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Forum(s) info",
            "headers": {
              "x-rate-limit-remaining": {
                "schema": {
                  "type": "integer",
                  "description": "Request limit per hour."
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForumsReadResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/read/me": {
      "post": {
        "tags": [
          "me"
        ],
        "operationId": "ReadMe",
        "summary": "Returns information for the current user.",
        "description": "Returns information for the current user.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "examples": {
                "usernameUsergroup": {
                  "summary": "return current user's uid, username, and usergroup",
                  "value": {
                    "asks": {
                      "me": {
                        "uid": true,
                        "username": true,
                        "usergroup": true
                      }
                    }
                  }
                },
                "allInformation": {
                  "summary": "return all available data for current user",
                  "value": {
                    "asks": {
                      "me": {
                        "uid": true,
                        "username": true,
                        "usergroup": true,
                        "displaygroup": true,
                        "additionalgroups": true,
                        "postnum": true,
                        "awards": true,
                        "bytes": true,
                        "threadnum": true,
                        "avatar": true,
                        "avatardimensions": true,
                        "avatartype": true,
                        "lastvisit": true,
                        "usertitle": true,
                        "website": true,
                        "timeonline": true,
                        "reputation": true,
                        "referrals": true,
                        "lastactive": true,
                        "unreadpms": true,
                        "invisible": true,
                        "totalpms": true,
                        "warningpoints": true
                      }
                    }
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/MeReadRequestAsk"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Me info",
            "headers": {
              "x-rate-limit-remaining": {
                "schema": {
                  "type": "integer",
                  "description": "Request limit per hour."
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeReadResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/read/posts": {
      "post": {
        "tags": [
          "posts"
        ],
        "operationId": "ReadPosts",
        "summary": "Returns information for provided post(s).",
        "description": "Returns information for provided post(s).",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "examples": {
                "lounge": {
                  "summary": "return HF API post information",
                  "value": {
                    "asks": {
                      "posts": {
                        "_pid": [
                          59852445
                        ],
                        "pid": true,
                        "tid": true,
                        "uid": true,
                        "fid": true,
                        "dateline": true,
                        "message": true,
                        "subject": true,
                        "edituid": true,
                        "edittime": true,
                        "editreason": true
                      }
                    }
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/PostsReadRequestAsk"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Post(s) info",
            "headers": {
              "x-rate-limit-remaining": {
                "schema": {
                  "type": "integer",
                  "description": "Request limit per hour."
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostsReadResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/read/sigmarket/market": {
      "post": {
        "tags": [
          "sigmarket"
        ],
        "operationId": "ReadSigmarketMarket",
        "summary": "Returns information for provided signature market(s) type market.",
        "description": "Returns information for provided signature market(s) type market.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmarketMarketReadRequestAsk"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sigmarket(s) market info",
            "headers": {
              "x-rate-limit-remaining": {
                "schema": {
                  "type": "integer",
                  "description": "Request limit per hour."
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/read/sigmarket/order": {
      "post": {
        "tags": [
          "sigmarket"
        ],
        "operationId": "ReadSigmarketOrder",
        "summary": "Returns information for provided signature market(s) type order.",
        "description": "Returns information for provided signature market(s) type order.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmarketOrderReadRequestAsk"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sigmarket(s) order info",
            "headers": {
              "x-rate-limit-remaining": {
                "schema": {
                  "type": "integer",
                  "description": "Request limit per hour."
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/read/threads": {
      "post": {
        "tags": [
          "threads"
        ],
        "operationId": "ReadThreads",
        "summary": "Returns information for provided thread(s).",
        "description": "Returns information for provided thread(s).",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "examples": {
                "loungeThreads": {
                  "summary": "return recent posts in Lounge \"Search posts by Forum ID(s).\"",
                  "value": {
                    "asks": {
                      "threads": {
                        "_fid": [
                          25
                        ]
                      }
                    }
                  }
                },
                "lounge": {
                  "summary": "return HF API Thread information",
                  "value": {
                    "asks": {
                      "threads": {
                        "_tid": [
                          6083782
                        ],
                        "tid": true,
                        "uid": true,
                        "fid": true,
                        "subject": true,
                        "closed": true,
                        "numreplies": true,
                        "views": true,
                        "dateline": true,
                        "firstpost": true,
                        "lastpost": true,
                        "lastposter": true,
                        "lastposteruid": true,
                        "prefix": true,
                        "icon": true,
                        "poll": true,
                        "username": true,
                        "sticky": true,
                        "bestpid": true
                      }
                    }
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/ThreadsReadRequestAsk"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Thread(s) info",
            "headers": {
              "x-rate-limit-remaining": {
                "schema": {
                  "type": "integer",
                  "description": "Request limit per hour."
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThreadsReadResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/read/users": {
      "post": {
        "tags": [
          "users"
        ],
        "operationId": "ReadUsers",
        "summary": "Returns information for provided user(s).",
        "description": "Returns information for provided user(s).",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "examples": {
                "lounge": {
                  "summary": "return user information for UID 1",
                  "value": {
                    "asks": {
                      "users": {
                        "_uid": [
                          1
                        ],
                        "uid": true,
                        "username": true,
                        "usergroup": true,
                        "displaygroup": true,
                        "additionalgroups": true,
                        "postnum": true,
                        "awards": true,
                        "myps": true,
                        "threadnum": true,
                        "avatar": true,
                        "avatardimensions": true,
                        "avatartype": true,
                        "usertitle": true,
                        "website": true,
                        "timeonline": true,
                        "reputation": true,
                        "referrals": true
                      }
                    }
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/UsersReadRequestAsk"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User(s) info",
            "headers": {
              "x-rate-limit-remaining": {
                "schema": {
                  "type": "integer",
                  "description": "Request limit per hour."
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/write/posts": {
      "post": {
        "tags": [
          "posts"
        ],
        "operationId": "WritePosts",
        "summary": "Write information to a provided thread.",
        "description": "Write information to a provided thread.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "examples": {
                "testApiPost": {
                  "summary": "post on the HF API test thread",
                  "value": {
                    "asks": {
                      "posts": {
                        "_tid": 6083735,
                        "_message": "Using the [url=https://github.com/xadamxk/hf-api-specification]hf-api-specification[/url] project to post on the HF API test thread."
                      }
                    }
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/PostsWriteRequestAsk"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Write Post(s) info",
            "headers": {
              "x-rate-limit-remaining": {
                "schema": {
                  "type": "integer",
                  "description": "Request limit per hour."
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostsWriteResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/write/threads": {
      "post": {
        "tags": [
          "threads"
        ],
        "operationId": "WriteThreads",
        "summary": "Create thread given provided information.",
        "description": "Create thread given provided information.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "examples": {
                "testApiThread": {
                  "summary": "Create a test thread in the HF API section.",
                  "value": {
                    "asks": {
                      "threads": {
                        "_fid": 375,
                        "_subject": "Test Thread",
                        "_message": "Using the [url=https://github.com/xadamxk/hf-api-specification]hf-api-specification[/url] project to create a HF API test thread."
                      }
                    }
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/ThreadsWriteRequestAsk"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Write Threads(s) info",
            "headers": {
              "x-rate-limit-remaining": {
                "schema": {
                  "type": "integer",
                  "description": "Request limit per hour."
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThreadsWriteResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/write/bytes": {
      "post": {
        "tags": [
          "bytes"
        ],
        "operationId": "WriteBytes",
        "summary": "Send bytes to provided user.",
        "description": "Send bytes to provided user.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "examples": {
                "testBytesDonation": {
                  "summary": "send xadamxk 15 bytes.",
                  "value": {
                    "asks": {
                      "bytes": {
                        "_uid": 1306528,
                        "_amount": 15,
                        "_reason": "Using the hf-api-specification project (https://github.com/xadamxk/hf-api-specification) to send xadamxk bytes."
                      }
                    }
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/BytesWriteRequestAsk"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Write Byte(s) info",
            "headers": {
              "x-rate-limit-remaining": {
                "schema": {
                  "type": "integer",
                  "description": "Request limit per hour."
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BytesWriteResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/write/bytes/deposit": {
      "post": {
        "tags": [
          "bytes"
        ],
        "operationId": "WriteBytesDeposit",
        "summary": "Deposit specified bytes to API Client Vault (Minimum 100).",
        "description": "Deposit specified bytes to API Client Vault (Minimum 100).",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "examples": {
                "depositBytes": {
                  "summary": "deposit 100 bytes.",
                  "value": {
                    "asks": {
                      "bytes": {
                        "_deposit": 100
                      }
                    }
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/BytesDepositWriteRequestAsk"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Write Byte(s) info",
            "headers": {
              "x-rate-limit-remaining": {
                "schema": {
                  "type": "integer",
                  "description": "Request limit per hour."
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BytesWriteResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/write/bytes/withdraw": {
      "post": {
        "tags": [
          "bytes"
        ],
        "operationId": "WriteBytesWithdraw",
        "summary": "Withdraw specified bytes to API Client Vault. (Minimum 100)",
        "description": "Withdraw specified bytes to API Client Vault. (Minimum 100)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "examples": {
                "depositBytes": {
                  "summary": "withdraw 100 bytes.",
                  "value": {
                    "asks": {
                      "bytes": {
                        "_withdraw": 100
                      }
                    }
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/BytesWithdrawWriteRequestAsk"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Write Byte(s) info",
            "headers": {
              "x-rate-limit-remaining": {
                "schema": {
                  "type": "integer",
                  "description": "Request limit per hour."
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BytesWriteResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/write/bytes/bump": {
      "post": {
        "tags": [
          "bytes"
        ],
        "operationId": "WriteBytesBump",
        "summary": "Bump specified thread using Stanley Byte Bump feature (100 bytes).",
        "description": "Bump specified thread using Stanley Byte Bump feature (100 bytes).",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "examples": {
                "byteBump": {
                  "summary": "Bump thread.",
                  "value": {
                    "asks": {
                      "bytes": {
                        "_bump": 6152837
                      }
                    }
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/BytesBumpWriteRequestAsk"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Write Byte(s) Bump info",
            "headers": {
              "x-rate-limit-remaining": {
                "schema": {
                  "type": "integer",
                  "description": "Request limit per hour."
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BytesWriteResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/write/contracts": {
      "post": {
        "tags": [
          "contracts"
        ],
        "operationId": "WriteContracts",
        "summary": "Create a new contract.",
        "description": "Create a new contract.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "examples": {
                "contract": {
                  "summary": "create a contract with Stanley",
                  "value": {
                    "asks": {
                      "contracts": {
                        "_action": "new",
                        "_position": "buying",
                        "_terms": "This is a test contract using the hf-api-specification project to generate a contract on the HF API.",
                        "_tid": "6035467",
                        "_timeout": 1,
                        "_uid": 1337,
                        "_youramount": 1,
                        "_yourcurrency": "bytes",
                        "_theirproduct": "Nothing."
                      }
                    }
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/ContractsWriteRequestAsk"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Contract(s) info",
            "headers": {
              "x-rate-limit-remaining": {
                "schema": {
                  "type": "integer",
                  "description": "Request limit per hour."
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContractsWriteResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    }
  }
}